3-4
学习GitHub的基本使用方法 搭建python的开发环境
3-5
2个小时左右的时间用于python语言的基本入门（1：00~3:00）
3个小时左右的时间用于基本了解python的网络编程（从来没接触过网络编程...）并简单了解socket编程的基本方法...基本完成第一步。

#Echo服务器端
from socketserver import TCPServer as TCP, StreamRequestHandler as SRH  
  
HOST = ''  
PORT = 21567  
ADDR = (HOST, PORT)  
  
class MyRequestHandler(SRH):  
    def handle(self):  
        print('...connected from:', self.client_address)  
        self.wfile.write(('%s' %(self.rfile.readline().decode())).encode())  
  
tcpServ = TCP(ADDR, MyRequestHandler)  
print('waiting for connection...')  
tcpServ.serve_forever()  

#Echo客户端
from socket import *  
  
HOST = '127.0.0.1'  
PORT = 21567  
BUFSIZE = 1024  
ADDR = (HOST, PORT)  
  
while True:  
    tcpCliSock = socket(AF_INET, SOCK_STREAM)  
    tcpCliSock.connect(ADDR)  
    data = input('input something:')  
    if not data:  
        break  
    tcpCliSock.send(('%s\r\n' % data).encode())  
    data = tcpCliSock.recv(BUFSIZE).decode()  
    if not data:  
        break  
    print(data.strip())  
tcpCliSock.close()  
3-6
实现数据库基本操作的思路：要实现数据的增、删、查的功能，分别定义三个函数
def __set__(key,value)
def __get__(key)
def __delete(key)
对从client端拿到的信息进行了st = ('%s' % (self.rfile.readline().decode())).encode()解码之后可以得到基本的字符串，
在对其进行了st.split()之后可以返回由若干子串组成的列表。
这里有一个奇怪的现象出现，在测试中首先输出st.split()，每一个字符串之中都会出现b''
eg：input something:set a number
==>[b'set',b'a',b'number']
但是这里依旧可以用字符串的处理方法进行判断，在判断出是set,get,还是delete之后要对不同的命令进行不同的操作。
如果是set，则调用__set__(key,value)方法
对于__set__(key,value)方法，有两个参数，key是属性的名称，value是要赋的值。
则在此处要先建立一个基本的数据库可供操作?

用字典实现了一个基本的数据库操作，仅仅是在server上面做了部署，初步代码如下：
# encoding: utf-8
# Echo服务器端
from socketserver import TCPServer as TCP, StreamRequestHandler as SRH

HOST = ''
PORT = 21562
ADDR = (HOST, PORT)


class MyRequestHandler(SRH):
    def handle(self):
        print('...connected from:', self.client_address)
        st = ('%s' % (self.rfile.readline().decode())).encode()
        db=Database()
        db.basicOperation(st)
        print(st.split())
        self.wfile.write(st)


class Database():
    def __init__(self):
        self.database={}
    def __set__(self, str):
        self.database[self[1].lstrip('b')]=self[2].lstrip('b\'').rstrip('\'')
        print('set')
    def __get__(self, str):
        self.database.get(self[1].lstrip('b'), 'The key you input is not in the database!')
        print('get')
    def __delete__(self, str):
        del self.database[self[1].lstrip('b')]
        print('delete')
    def basicOperation(self, str):
        st=str.strip().split();
        if st[0]==b'set':
            self.__set__(st)
        if st[0]==b'get':
            self.__get__(st)
        if st[0]==b'delete':
            self.__delete__(st)
        else:
            print('Illegal Input!')

tcpServ = TCP(ADDR, MyRequestHandler)
print('waiting for connection...')
tcpServ.serve_forever()

尝试运行后发现只要是输入‘set’、‘get’、‘delete’相关的语句都不能执行，报错信息为
TypeError: 'Database' object does not support indexing

经过一整晚的修改，将server端的代码修改如下，但仍然只能完成set函数和ILLEGAL的输出，对于GET和DELETE部分尚不能完成。
但是这里存在一个致命的弱点，就是每输入一次会建立一个新的datebase对象，那么意味着每输入一次会建立一个新的字典，这样一来，
delete函数和get函数无论如何都是无法完成任务的。
# encoding: utf-8
# Echo服务器端
from socketserver import TCPServer as TCP, StreamRequestHandler as SRH

HOST = ''
PORT = 21566
ADDR = (HOST, PORT)

class MyRequestHandler(SRH):
    def handle(self):
        print('...connected from:', self.client_address)
        st = ('%s' % (self.rfile.readline().decode())).encode()
        db=Database()
        st1 = (db.basicOperation(st)).encode()
        self.wfile.write(st1)

class Database():
    def __init__(self):
        self.database={}
    def __set__(self, newstr):
        self.database[newstr[1]]=newstr[2].rstrip('\'')
        print(self.database)
        return ('TRUE')
    def __get__(self, newstr):
        st=str(self.database.get(newstr[1]))
        return st
    def __delete__(self, newstr):
        if newstr[1].rstrip('\'') in self.database:
            del self.database[newstr[1].rstrip('\'')]
            st='1'
        else:
            st='NONE'
        return st
    def basicOperation(self, newstr):
        st=str(newstr.strip()).split()
        print('here print the st',st)
        if st[0]=="b'set":
            return self.__set__(st)
        else:
            if st[0]=="b'get":
                self.__get__(st)
            else:
                if st[0]=="b'delete":
                    self.__delete__(st)
                else:
                    return('Illegal Input!')

tcpServ = TCP(ADDR, MyRequestHandler)
print('waiting for connection...')
tcpServ.serve_forever()

经过调试已经基本实现了set/get/delete/illgeal的基本方法，但是还是没能解决单例的问题，今天的代码修改如下。
# encoding: utf-8
# Echo服务器端
from socketserver import TCPServer as TCP, StreamRequestHandler as SRH

HOST = ''
PORT = 21566
ADDR = (HOST, PORT)

class MyRequestHandler(SRH):
    def handle(self):
        print('...connected from:', self.client_address)
        st = ('%s' % (self.rfile.readline().decode())).encode()
        db=Database()
        print(db.basicOperation(st))
        st1 = (db.basicOperation(st)).encode()
        self.wfile.write(st1)

class Singleton(type):

    def __init__(self, name, bases, dic):
        super(Singleton, self).__init__(name, bases, dic)
        self.instance = None

    def __call__(self, *args, **kwargs):
        if self.instance is None:
            self.instance = super(Singleton, self).__call__(*args, **kwargs)
        return self.instance


class Database():

    __metaclass__=Singleton

    def __init__(self):
        self.database={}

    def __set__(self, newstr):
        self.database[newstr[1]]=newstr[2].rstrip('\'')
        print(self.database)
        return ('TRUE')

    def __get__(self, newstr):
        st=self.database.get(newstr[1].rstrip('\''),'The data you input is not in the database!')
        return st

    def __delete__(self, newstr):
        if newstr[1].rstrip('\'') in self.database:
            del self.database[newstr[1].rstrip('\'')]
            st=1
        else:
            st='NONE'
        return st

    def basicOperation(self, newstr):
        st=str(newstr.strip()).split()
        if st[0]=="b'set":
            return self.__set__(st)
        else:
            if st[0]=="b'get":
                return self.__get__(st)
            else:
                if st[0]=="b'delete":
                    return self.__delete__(st)
                else:
                    return('Illegal Input!')

tcpServ = TCP(ADDR, MyRequestHandler)
print('waiting for connection...')
tcpServ.serve_forever()

在经过了长达两天的debug之后，终于解决了未知的困难...成功建立了数据库！！！！！

# encoding: utf-8
# Echo服务器端
from socketserver import TCPServer as TCP, StreamRequestHandler as SRH
HOST = ''
PORT = 21567
ADDR = (HOST, PORT)

class Singleton(type):
    def __init__(cls, name, bases, dict):
        super(Singleton, cls).__init__(name, bases, dict)
        cls.instance = None

    def __call__(cls, *args, **kw):
        if cls.instance is None:
            cls.instance = super(Singleton, cls).__call__(*args, **kw)
            return cls.instance

class Database(object):
    __metaclass__ = Singleton
    database={}
    def __set__(self, newstr):
        self.database[newstr[1]]=newstr[2].rstrip('\'')
        return ('TRUE')
    def __get__(self, newstr):
        st=self.database.get(newstr[1].rstrip('\''),'The data you input is not in the database!')
        return st
    def __delete__(self, newstr):
        if newstr[1].rstrip('\'') in self.database:
            del self.database[newstr[1].rstrip('\'')]
            st='the data has already been deleted'
        else:
            st='NONE'
        return st
    def basicOperation(self, newstr):
        st=str(newstr.strip()).split()
        if st[0]=="b'set":
            return self.__set__(st)
        else:
            if st[0]=="b'get":
                return self.__get__(st)
            else:
                if st[0]=="b'delete":
                    return self.__delete__(st)
                else:
                    return('Illegal Input!')

class MyRequestHandler(SRH):
    def handle(self):
        print('...connected from:', self.client_address)
        st = ('%s' % (self.rfile.readline().decode())).encode()
        db = Database()
        st1 = (db.basicOperation(st)).encode()
        self.wfile.write(st1)

tcpServ = TCP(ADDR, MyRequestHandler)
print('waiting for connection...')
tcpServ.serve_forever()


# encoding: utf-8
# Echo客户端
from socket import *

HOST = '127.0.0.1'
PORT = 21567
BUFSIZE = 1024
ADDR = (HOST, PORT)

while True:
    tcpCliSock = socket(AF_INET, SOCK_STREAM)
    tcpCliSock.connect(ADDR)
    data = input('input something:')
    if not data:
        break
    tcpCliSock.send(('%s\r\n' % data).encode())
    data = tcpCliSock.recv(BUFSIZE).decode()
    if not data:
        break
    print(data.strip())
tcpCliSock.close()
